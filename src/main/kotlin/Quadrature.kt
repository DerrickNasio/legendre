// Perform 10-point Gauss-Legendre quadrature
fun quadrature(leftEndpoint: Double, rightEndpoint: Double, integrandFunction: (input: Double) -> Double): Double {
    val points = arrayOf(
        -0.973906528517171720077964012084452,
        -0.865063366688984510732096688423493,
        -0.679409568299024406234327365114874,
        -0.433395394129247190799265943165784,
        -0.148874338981631210884826001129720,
        +0.148874338981631210884826001129720,
        +0.433395394129247190799265943165784,
        +0.679409568299024406234327365114874,
        +0.865063366688984510732096688423493,
        +0.973906528517171720077964012084452
    )
    val weights = arrayOf(
        0.066671344308688137593568809893332,
        0.149451349150580593145776339657697,
        0.219086362515982043995534934228163,
        0.269266719309996355091226921569469,
        0.295524224714752870173892994651338,
        0.295524224714752870173892994651338,
        0.269266719309996355091226921569469,
        0.219086362515982043995534934228163,
        0.149451349150580593145776339657697,
        0.066671344308688137593568809893332
    )

    val inputArray = scaleFromStandardInterval(leftEndpoint, rightEndpoint, points)
    var accumulator = 0.0
    for (i in inputArray.indices) {
        accumulator += (weights[i] * integrandFunction(inputArray[i]))
    }
    return (rightEndpoint - leftEndpoint) / 2.0 * accumulator
}
